#!/bin/bash

config_item()
{
  for x in /etc/default/grub /etc/default/grub.d/*.cfg; do
    if [ -e "$x" ]; then
	# Lose any output here so we don't confuse our
	# caller. The xen packages echo stuff here, Aargh!
      . "$x" > /dev/null
    fi
  done
  if [ "$(eval echo "\${$1+set}")" = set ]; then
    eval echo "\$$1"
  else
    return
  fi
}

if [[ $EUID -ne 0 ]]; then
    echo "$0: You must run this as root"
    exit 2
fi

bootloader_id="$(config_item GRUB_DISTRIBUTOR | cut -d' ' -f1)"
disk_name="$(grub-probe -t disk /boot/grub || true)"
grub_type=""
efi_target=""
efi_grub_file=""
efi_boot_file=""
fallback_is_same=false
did_update=false

if [ -e "/boot/grub/i386-efi/core.efi" ]; then
    # Assume all 32-bitters are legacy x86
    grub_type="EFI"
    efi_target="i386-efi"
    efi_grub_file="grubia32.efi"
    efi_boot_file="bootia32.efi"
elif [ -e "/boot/grub/arm64-efi/core.efi" ]; then
    grub_type="EFI"
    efi_target="arm64-efi"
    efi_grub_file="grubaa64.efi"
    efi_boot_file="bootaa64.efi"
elif [ -e "/boot/grub/loongarch64-efi/core.efi" ]; then
    grub_type="EFI"
    efi_target="loongarch64-efi"
    efi_grub_file="grubloongarch64.efi"
    efi_boot_file="bootloongarch64.efi"
elif [ -e "/boot/grub/x86_64-efi/core.efi" ]; then
    # If it's not ARM, must be AMD64
    grub_type="EFI"
    efi_target="x86_64-efi"
    efi_grub_file="grubx64.efi"
    efi_boot_file="bootx64.efi"
elif [ -e "/boot/grub/i386-pc/core.img" ]; then
    grub_type="MBR"
fi

if [[ $grub_type == "EFI" ]]; then
    for path in /boot /efi; do
        if [[ -e $path ]]; then
            efi_directory="$(find $path -name $efi_grub_file | awk -F '/EFI' '{print $1}')"
            efi_source_file="$(find $efi_directory/EFI/$bootloader_id -name $efi_grub_file)"
            efi_target_file="$(find $path -name $efi_boot_file)"
            cmp -s $efi_source_file $efi_target_file && fallback_is_same=true
            [[ ! -z $efi_directory ]] && break
        fi
    done
    if [[ -z $efi_directory ]]; then
        echo "WARNING: EFI directory not found! Grub couldn't be installed." >&2
        exit 1
    fi
fi

if [[ $grub_type == "EFI" ]] && [[ -e "/boot/grub/$efi_target/core.efi" ]]; then
    _grub_install="grub-install --target=$efi_target --efi-directory=$efi_directory \
--bootloader-id=$bootloader_id --recheck --force" && did_update=true
elif [[ $grub_type == "MBR" ]]; then
    _grub_install="grub-install --target=i386-pc --boot-directory=/boot \
--recheck --force $disk_name" && did_update=true
fi

echo "Grub will be installed on: $grub_type"
if ! $_grub_install ; then
    echo "Failed: $_grub_install" >&2
    echo "WARNING: Bootloader is not properly installed, system may not be bootable" >&2
    exit 1
elif [[ $grub_type == "EFI" ]] && [[ -e "$efi_target_file" ]] \
     && [[ "$fallback_is_same" == "true" ]] && [[ "$did_update" == "true" ]]; then
    echo "Update UEFI Fallback file to: $efi_source_file"
    cp $efi_source_file $efi_target_file
fi

grub-mkconfig -o /boot/grub/grub.cfg "$@"

# workaround for https://git.savannah.gnu.org/cgit/grub.git/commit/?id=3cf2e848bc03c44d30bb87e583d12efe7e7ccf75
# if grub is not updated in MBR/EFI dashes still won't work, hence we remove them
sed -i -e '/cryptomount -u/ {s/-//g;s/ u/ -u/g}' /boot/grub/grub.cfg
